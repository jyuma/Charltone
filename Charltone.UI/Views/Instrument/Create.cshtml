@model Charltone.UI.ViewModels.Instrument.InstrumentEditViewModel

@{
    ViewBag.Title = "Create Instrument";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="addinstrument">
    @using (Html.BeginForm())
    {
        <div class="editinstrcontainer">
            @Html.ValidationSummary(true)
            <div class="editinstrinfo">
                <div class="editinstrbuttons">
                    <input class="savebutton" type="submit" value="Save" name="commandType"/>
                    &nbsp
                    @Html.ActionLink("Main List", "Index", "Instrument")
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.InstrumentTypes)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(x => x.InstrumentTypeId, Model.InstrumentTypes)
                </div>
                <div class="editor-label">
                    @Html.Label("Model/SN")
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Model)
                    @Html.ValidationMessageFor(model => model.Model)
                    @Html.EditorFor(model => model.Sn)
                    @Html.ValidationMessageFor(model => model.Sn)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.ClassificationTypes)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(x => x.ClassificationId, Model.ClassificationTypes)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.SubClassificationTypes)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(x => x.SubClassificationId, Model.SubClassificationTypes)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.StatusTypes)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(x => x.StatusId, Model.StatusTypes)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.DisplayPrice)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.DisplayPrice)
                    @Html.ValidationMessageFor(model => model.DisplayPrice)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Price)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Price)
                    @Html.ValidationMessageFor(model => model.Price)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Top)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Top)
                    @Html.ValidationMessageFor(model => model.Top)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.BackAndSides)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.BackAndSides)
                    @Html.ValidationMessageFor(model => model.BackAndSides)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Body)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Body)
                    @Html.ValidationMessageFor(model => model.Body)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Binding)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Binding)
                    @Html.ValidationMessageFor(model => model.Binding)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Bridge)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Bridge)
                    @Html.ValidationMessageFor(model => model.Bridge)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.CaseDetail)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.CaseDetail)
                    @Html.ValidationMessageFor(model => model.CaseDetail)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Dimensions)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Dimensions)
                    @Html.ValidationMessageFor(model => model.Dimensions)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.EdgeDots)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.EdgeDots)
                    @Html.ValidationMessageFor(model => model.EdgeDots)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Faceplate)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Faceplate)
                    @Html.ValidationMessageFor(model => model.Faceplate)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Finish)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Finish)
                    @Html.ValidationMessageFor(model => model.Finish)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Fingerboard)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Fingerboard)
                    @Html.ValidationMessageFor(model => model.Fingerboard)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.FretMarkers)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.FretMarkers)
                    @Html.ValidationMessageFor(model => model.FretMarkers)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.FretWire)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.FretWire)
                    @Html.ValidationMessageFor(model => model.FretWire)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Neck)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Neck)
                    @Html.ValidationMessageFor(model => model.Neck)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.NutWidth)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.NutWidth)
                    @Html.ValidationMessageFor(model => model.NutWidth)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.PickGuard)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.PickGuard)
                    @Html.ValidationMessageFor(model => model.PickGuard)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Pickup)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Pickup)
                    @Html.ValidationMessageFor(model => model.Pickup)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.ScaleLength)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.ScaleLength)
                    @Html.ValidationMessageFor(model => model.ScaleLength)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Strings)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Strings)
                    @Html.ValidationMessageFor(model => model.Strings)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Tailpiece)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Tailpiece)
                    @Html.ValidationMessageFor(model => model.Tailpiece)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Tuners)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Tuners)
                    @Html.ValidationMessageFor(model => model.Tuners)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Comments)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Comments)
                    @Html.ValidationMessageFor(model => model.Comments)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.FunFacts)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.FunFacts)
                    @Html.ValidationMessageFor(model => model.FunFacts)
                </div>
                <div class="editinstrbuttons">
                    <input class="savebutton" type="submit" value="Save" name="commandType" />
                    &nbsp
                    @Html.ActionLink("Main List", "Index", "Instrument")
                </div>
            </div>
        </div>
    <div>
        <img class="editinstrphotoimg" src=@Url.Action("GetPhoto", "Instrument", new { id = -1 }) alt="" />
    </div>
    }
</div>