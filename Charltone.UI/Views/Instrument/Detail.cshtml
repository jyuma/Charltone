@using System.Text.RegularExpressions
@using Charltone.UI.Helpers
@using Charltone.UI.ViewModels.Instrument;

@model InstrumentDetailViewModel
           
@{
    ViewBag.Title = "Instrument Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
    var instrumentPhotos;

    $(document).ready(function () {
        instrumentPhotos = GetInstrumentPhotos("@Url.Content("~/")", "@Model.ProductId");
        BindPhotos("@Url.Content("~/")", $.map(instrumentPhotos, function (arr) { return { Id: arr.Id }; }));
        BindTooltips('@Model.Comments', '@Model.FunFacts');
    });
</script>

<div id="instrdetail">
    <div id="instrdetailcontent">
        <div id="instrdetailheader">
            <div id="instrdetailmodelstatus">
                @Model.ModelSn
                <div class="@Regex.Replace(@Model.Status, @"\s", "").ToLower()">
                    @(Model.ShowPrice ? Model.Price : Model.Status)
                </div>
            </div>
            <div id ="instrdetaileditupload">
                <div class="editlink " id="instrdetaileditbutton">
                    @Html.ActionLinkAuthorized("Edit", "Edit", new { id = @Model.ProductId })
                </div>

                @using (Html.BeginForm(@Model.ProductId + "/Details", "Instrument", FormMethod.Post, new { @enctype = "multipart/form-data" }))
                {
                    if (@Model.InstrumentPhotos.Count() < 8)
                    {
                        <div id="instrdetailadminbuttons" class="@(Model.IsAuthenticated ? "instrdetailadmin" : "hidden")">
                            Photo:
                            <input class=" fileinput" type="file" name="file" id="file" />
                            <input type="submit" value="Upload" disabled="disabled" />
                        </div>
                    }
                }
            </div>

            <div id="instrdetaillinks">
                <div>
                    <a id="backtolistlink" href="@Url.Action("Index", "Instrument")">Back To List</a>
                </div>
                @if (!@Model.Comments.IsEmpty())
                {
                    <div>
                        <a class="hint" id="commentshint">Comments</a>
                    </div>
                }
                @if (!@Model.FunFacts.IsEmpty())
                {
                    <div>
                        <a class="hint" id="funfactshint">Fun Facts</a>
                    </div>
                }
            </div>
        </div>
        
        <div class="linehorizontal" id="instrdetaillinehoriztop"></div>

        <div id="instrdetailininfo">
            <div id="instrdetailmainphoto">
                <img class="mainphoto" id="currentphoto" src=@Url.Action("GetPhoto", "Instrument", new { id = Model.DefaultPhotoId }) alt=""/>
            </div>
            <div class="linevertical" id="instrdetaillinevertical"></div>
            <div id="instrdetailinfo">
                <label id="instrdetailinfoheader">@Html.DisplayFor(model => model.Classification) / @Html.DisplayFor(model => model.SubClassification)</label>
                <ul id="instrdetailinfolist">
                    @if (!@Model.Top.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Top) - @Html.DisplayFor(model => model.Top)
                        </li>
                    }
                    @if (!@Model.BackAndSides.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.BackAndSides) - @Html.DisplayFor(model => model.BackAndSides)
                        </li>
                    }
                    @if (!@Model.Body.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Body) - @Html.DisplayFor(model => model.Body)
                        </li>
                    }
                    @if (!@Model.Binding.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Binding) - @Html.DisplayFor(model => model.Binding)
                        </li>
                    }
                    @if (!@Model.Bridge.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Bridge) - @Html.DisplayFor(model => model.Bridge)
                        </li>
                    }
                    @if (!@Model.CaseDetail.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.CaseDetail) - @Html.DisplayFor(model => model.CaseDetail)
                        </li>
                    }
                    @if (!@Model.Dimensions.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Dimensions) - @Html.DisplayFor(model => model.Dimensions)
                        </li>
                    }
                    @if (!@Model.EdgeDots.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.EdgeDots) - @Html.DisplayFor(model => model.EdgeDots)
                        </li>
                    }
                    @if (!@Model.Faceplate.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Faceplate) - @Html.DisplayFor(model => model.Faceplate)
                        </li>
                    }
                    @if (!@Model.Finish.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Finish) - @Html.DisplayFor(model => model.Finish)
                        </li>
                    }
                    @if (!@Model.Fingerboard.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Fingerboard) - @Html.DisplayFor(model => model.Fingerboard)
                        </li>
                    }
                    @if (!@Model.FretMarkers.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.FretMarkers) - @Html.DisplayFor(model => model.FretMarkers)
                        </li>
                    }
                    @if (!@Model.FretWire.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.FretWire) - @Html.DisplayFor(model => model.FretWire)
                        </li>
                    }
                    @if (!@Model.Neck.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Neck) - @Html.DisplayFor(model => model.Neck)
                        </li>
                    }
                    @if (!@Model.NutWidth.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.NutWidth) - @Html.DisplayFor(model => model.NutWidth)
                        </li>
                    }

                    @if (!@Model.PickGuard.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.PickGuard) - @Html.DisplayFor(model => model.PickGuard)
                        </li>
                    }

                    @if (!@Model.Pickup.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Pickup) - @Html.DisplayFor(model => model.Pickup)
                        </li>
                    }
                    @if (!@Model.ScaleLength.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.ScaleLength) - @Html.DisplayFor(model => model.ScaleLength)
                        </li>
                    }
                    @if (!@Model.Strings.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Strings) - @Html.DisplayFor(model => model.Strings)
                        </li>
                    }
                    @if (!@Model.Tailpiece.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Tailpiece) - @Html.DisplayFor(model => model.Tailpiece)
                        </li>
                    }
                    @if (!@Model.Tuners.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Tuners) - @Html.DisplayFor(model => model.Tuners)
                        </li>
                    }
                </ul>
            </div>
        </div>

        <div class="linehorizontal" id="instrdetaillinehorizbottom"></div>
        @using (Html.BeginForm(@Model.ProductId + "/Detail", "Instrument"))
        {
            <div id="instrdetailthumbnailconatiner">
                @foreach (var instrPhoto in Model.InstrumentPhotos)
                {
                    var lnkImageId = "lnk-show-image_" + instrPhoto.Id;

                    <div id="instrdetailthumbnail">
                        <a id="@lnkImageId" href="javascript:;">
                            <img class="thumbnail" src=@Url.Action("GetThumbnail", "Instrument", new { id = instrPhoto.Id}) alt='' />
                        </a>
                        <div>
                            @{
                                if (!instrPhoto.IsDefault)
                                {
                                    var defaultName = "SetDefault_" + instrPhoto.Id;
                                    <input type="submit" name=@defaultName value="D" class="@(Model.IsAuthenticated ? "thumbnailbutton" : "hidden")" />
                                }
                                
                                var deleteName = "Delete_" + instrPhoto.Id;
                                <input type="submit" name=@deleteName value="R" class="@(Model.IsAuthenticated ? "thumbnailbutton" : "hidden")" onclick="return confirm('Remove photo?');" />

                                if (!instrPhoto.IsFirst)
                                {
                                    var moveleft = "MoveLeft_" + instrPhoto.Id;
                                    <input type="submit" name=@moveleft value="<" class="@(Model.IsAuthenticated ? "thumbnailbutton" : "hidden")" />
                                }
                                if (!instrPhoto.IsLast)
                                {
                                    var moveRight = "MoveRight_" + instrPhoto.Id;
                                    <input type="submit" name=@moveRight value=">" class="@(Model.IsAuthenticated ? "thumbnailbutton" : "hidden")" />
                                }
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>