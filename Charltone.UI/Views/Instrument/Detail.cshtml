@using Charltone.UI.ViewModels.Instrument;

@model InstrumentDetailViewModel
           
@{
    ViewBag.Title = "Instrument Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">

    var photoIds = @Html.Raw(Json.Encode(Model.PhotoIds));
    var funFacts = @Html.Raw(Json.Encode(Model.FunFacts));
    var comments = @Html.Raw(Json.Encode(Model.Comments));
    var defaultPhotoId = @Html.Raw(Json.Encode(Model.DefaultPhotoId));
    
    $(document).ready(function () 
    {
        //--- THIS CODE IS DUPLICATED IN PHOTO INDEX VIEW (BEGIN)
        $(photoIds).each(function (index, value) {
            $("#lnk-show-image_" + value).click(function () {
                showImage(value);
            });
        });
                
        function showImage(photoId) {            
            var url = '@Url.Action("GetPhotoJson", "Instrument")';

            $.getJSON(url, { "id": photoId },
                function (data) {
                    $("#currentphoto").attr('src', 'data:image/jpg;base64,' + data + '');
                });
        }
        //--- THIS CODE IS DUPLICATED IN PHOTOS INDEX VIEW (END)

        var changeFunFactsToolTipPos = function (event) 
        {
            var tooltipX = event.pageX - 8;
            var tooltipY = event.pageY + 8;
            $('div.funfactstooltip').css({ top: tooltipY, left: tooltipX });
        };

        var showFunFactsToolTip = function (event) 
        {
            $('div.funfactstooltip').remove();
            $('<div class="funfactstooltip">' + funFacts + '</div>')
                .appendTo('body');
            changeFunFactsToolTipPos(event);
        };

        var hideFunFactsToolTip = function () 
        {
            $('div.funfactstooltip').remove();
        };

        $("a#funfactshint").bind(
            {
                mousemove: changeFunFactsToolTipPos,
                mouseenter: showFunFactsToolTip,
                mouseleave: hideFunFactsToolTip
            });

        var changeCommentsToolTipPos = function (event) {
            var tooltipX = event.pageX - 8;
            var tooltipY = event.pageY + 8;
            $('div.commentstooltip').css({ top: tooltipY, left: tooltipX });
        };

        var showCommentsToolTip = function (event) {
            $('div.commentstooltip').remove();
            $('<div class="commentstooltip">' + comments + '</div>')
                .appendTo('body');
            changeCommentsToolTipPos(event);
        };

        var hideCommentsToolTip = function () {
            $('div.commentstooltip').remove();
        };

        $("a#commentshint").bind(
            {
                mousemove: changeCommentsToolTipPos,
                mouseenter: showCommentsToolTip,
                mouseleave: hideCommentsToolTip
            });
    });
</script>

<div id="instrumentdetail">
    <div id="instrumentdetailcontent">
        <div id="instrdetailheader">
            <div id="instrdetailmodel">
                @Model.Model
            </div>
            <div id="instrdetailbacktolist">
                @if (!@Model.Comments.IsEmpty())
                {
                    <a id="commentshint">Comments</a>
                }
                else
                {
                    <a id="commentshint"></a>
                }
                @if (!@Model.FunFacts.IsEmpty())
                {            
                    <a id="funfactshint">Fun Facts</a>
                }
                else
                {
                    <a id="funfactshint"></a>
                }
                <a id="backtolistlink" href="@Url.Action("Index", "Instrument")">Back to list</a>
            </div>

            @{
                string id = "";
                
                if (Model.InstrumentStatus == "Sold")
                {
                    id = "sold";
                }
                else if (Model.InstrumentStatus == "Not For Sale")
                {
                    id = "notforsale";
                }
                else if (Model.InstrumentStatus == "In Progress")
                {
                    id = "inprogress";
                }
                else if (Model.InstrumentStatus == "Available")
                {
                    <div id="instrumentdetailprice">
                        @Model.Price
                    </div>
                }
                if (!id.IsEmpty())
                {
                    <div id="@id">
                        @Model.InstrumentStatus
                    </div>
                }
            }
        </div>
        
        <div class="linehorizontal" id="instrdetaillinehoriztop"></div>

        <div id="instrumentinfo">
            <div id="instrdetailmainphoto">
                <img class="mainphoto" id="currentphoto" src=@Url.Action("GetPhoto", "Instrument", new { id = Model.DefaultPhotoId }) alt=""/>
            </div>
            <div class="linevertical" id="instrdetaillinevertical"></div>
            <div id="instrdetailinfo">
                <label id="instrdetailinfoheader">@Html.DisplayFor(model => model.Classification) / @Html.DisplayFor(model => model.SubClassification)</label>
                <ul id="instrdetailinfolist">
                    @if (!@Model.BackAndSides.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.BackAndSides) - @Html.DisplayFor(model => model.BackAndSides)
                        </li>
                    }
                    @if (!@Model.Body.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Body) - @Html.DisplayFor(model => model.Body)
                        </li>
                    }
                    @if (!@Model.Binding.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Binding) - @Html.DisplayFor(model => model.Binding)
                        </li>
                    }
                    @if (!@Model.Bridge.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Bridge) - @Html.DisplayFor(model => model.Bridge)
                        </li>
                    }
                    @if (!@Model.CaseDetail.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.CaseDetail) - @Html.DisplayFor(model => model.CaseDetail)
                        </li>
                    }
                    @if (!@Model.Dimensions.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Dimensions) - @Html.DisplayFor(model => model.Dimensions)
                        </li>
                    }
                    @if (!@Model.EdgeDots.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.EdgeDots) - @Html.DisplayFor(model => model.EdgeDots)
                        </li>
                    }
                    @if (!@Model.Faceplate.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Faceplate) - @Html.DisplayFor(model => model.Faceplate)
                        </li>
                    }
                    @if (!@Model.Finish.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Finish) - @Html.DisplayFor(model => model.Finish)
                        </li>
                    }
                    @if (!@Model.Fingerboard.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Fingerboard) - @Html.DisplayFor(model => model.Fingerboard)
                        </li>
                    }
                    @if (!@Model.FretMarkers.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.FretMarkers) - @Html.DisplayFor(model => model.FretMarkers)
                        </li>
                    }
                    @if (!@Model.FretWire.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.FretWire) - @Html.DisplayFor(model => model.FretWire)
                        </li>
                    }
                    @if (!@Model.Neck.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Neck) - @Html.DisplayFor(model => model.Neck)
                        </li>
                    }
                    @if (!@Model.NutWidth.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.NutWidth) - @Html.DisplayFor(model => model.NutWidth)
                        </li>
                    }

                    @if (!@Model.PickGuard.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.PickGuard) - @Html.DisplayFor(model => model.PickGuard)
                        </li>
                    }

                    @if (!@Model.Pickup.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Pickup) - @Html.DisplayFor(model => model.Pickup)
                        </li>
                    }
                    @if (!@Model.ScaleLength.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.ScaleLength) - @Html.DisplayFor(model => model.ScaleLength)
                        </li>
                    }
                    @if (!@Model.Strings.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Strings) - @Html.DisplayFor(model => model.Strings)
                        </li>
                    }
                    @if (!@Model.Top.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Top) - @Html.DisplayFor(model => model.Top)
                        </li>
                    }
                    @if (!@Model.Tuners.IsEmpty())
                    {
                        <li>
                            @Html.LabelFor(model => model.Tuners) - @Html.DisplayFor(model => model.Tuners)
                        </li>
                    }
                </ul>
            </div>
        </div>

        <div class="linehorizontal" id="instrdetaillinehorizbottom"></div>

        <div id="instrdetailthumbnail">
            @foreach (var pId in Model.PhotoIds)
            {
                var @lnkImageid = "lnk-show-image_" + @pId;
                <a id=@lnkImageid href="javascript:;"> <img class="thumbnail" src='@Url.Action("GetThumbnail", "Instrument", new { id = pId })' alt=""/></a>
            }
        </div>
    </div>
</div>